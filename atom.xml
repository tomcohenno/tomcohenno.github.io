<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tom's Octopress Blog]]></title>
  <link href="http://tomcohenno.github.io/atom.xml" rel="self"/>
  <link href="http://tomcohenno.github.io/"/>
  <updated>2014-10-20T20:26:40-04:00</updated>
  <id>http://tomcohenno.github.io/</id>
  <author>
    <name><![CDATA[Tom]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RRRRRRRspec]]></title>
    <link href="http://tomcohenno.github.io/blog/2014/10/20/rrrrrrrspec/"/>
    <updated>2014-10-20T18:04:34-04:00</updated>
    <id>http://tomcohenno.github.io/blog/2014/10/20/rrrrrrrspec</id>
    <content type="html"><![CDATA[<p><img src="http://www.quickmeme.com/img/d3/d3bd7d4e0150df19d47a9f8b773848f0bb8e50d9f1c99ace7b4b4f38245ff8c7.jpg" alt="alig" /></p>

<h1>An introduction to RubyTest</h1>

<p>Given the massive number of times that we need to run Rspec, I found it helpful to install a package for Sublime that would let me run tests without having to leave the program.  This program, RubyTest, is an add-in to Sublime and is installable directly through the program.</p>

<h3>Step 1 - Install Package Control</h3>

<p>If you haven&rsquo;t already, you need to install Package Manager for Sublime.  It&rsquo;s really easy.  Just open a Sublime document and hit command + shift + P.  Type in &ldquo;Install Package&rdquo; (or at least enough of the letters&hellip;) and hit enter.</p>

<figure>
   <img class="center" src="http://tomcohenno.github.io/Users/TomCohenno/Documents/repos/octopress/source/images/install.png" />
   <figcaption>(Not an actual Ruby method.)</figcaption>
</figure>


<p><img src="http://tomcohenno.github.io/Users/TomCohenno/Documents/repos/octopress/source/images/install.png" alt="hello" /></p>

<p>After Package Control is installed we are ready to install the actual package that will be running our Rspec tests - RubyTest.</p>

<h3>Step 2 - Download RubyTest</h3>

<p>This is done in the same way that we installed Package Control.  From within Sublime, hit command + shift + P again to bring up our dialog box.  Type &ldquo;RubyTest&rdquo; and hit enter to install.</p>

<p><img src="http://tomcohenno.github.io/Users/TomCohenno/Documents/repos/octopress/source/images/rubytest.png" alt="rubytest" /></p>

<h3>Step 3 - Tell RubyTest about RVM</h3>

<p>When RVM is installed it slightly modifies your Ruby directory structure, and RubyTest needs to be made aware of this in order to work.  Thankfully the fix is relatively straightforward.  Since Sublime uses various text files to manage package settings, we need to modify the User settings for RubyTest.</p>

<p>First, open Sublime and go to Sublime Text -> Preference -> Package Settings -> RubyTest -> Settings - User</p>

<p><img src="http://tomcohenno.github.io/Users/TomCohenno/Documents/repos/octopress/source/images/find_settings.png" alt="find settings" /></p>

<p>In the empty text file that appears, copy/paste the following code in order to inform Sublime about RVM.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "check_for_rvm": true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now save, close the file, and quit Sublime.</p>

<h3>Step 4 - Using RubyTest</h3>

<p>Using RubyTest is relatively straightforward, however, you must open documents from the terminal.  This is nothing diferent than how most of us open documents already.  Just type <code>subl .</code> in your directory to get started.</p>

<p>There are two main options when you run Rspec:</p>

<p>1 - Run all tests at once - Right click anywhere in your rspec document and go to RubyTest -> Run all tests.</p>

<p>This will run all rspec tests and output the results in the test panel.</p>

<p><img src="http://tomcohenno.github.io/Users/TomCohenno/Documents/repos/octopress/source/images/rspec%20all.png" alt="all_tests" /></p>

<p>2 - Run only a specific test - In the rspec file, right click on the specific test that you want to run and click &ldquo;Run single test&rdquo;.  This will run the test(s) that fall under the context of the rspec.</p>

<p>For example, in the screen below, only the spec &lsquo;has a title&rsquo; will run. However, if the cursor had been on line 14 instead of 17, running &ldquo;run single test&rdquo; will actually run all tests that fall under the parent context of &lsquo;Movie.new&rsquo;.</p>

<p><img src="http://tomcohenno.github.io/Users/TomCohenno/Documents/repos/octopress/source/images/rspec_example.png" alt="rspecfail" /></p>

<h3>Step 5 - Find out how to run tests vertically and let me know how to do so :)</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tom's First Post on Octopress - an Attempt to Understand Evaluation Strategy]]></title>
    <link href="http://tomcohenno.github.io/blog/2014/10/07/toms-first-post-on-octopress/"/>
    <updated>2014-10-07T19:25:35-04:00</updated>
    <id>http://tomcohenno.github.io/blog/2014/10/07/toms-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>So, I&rsquo;m not sure about you all, but it seems that everytime I modified an argument in a method I would make the wrong assumption as to what would happen to it outside of the method.  It took some googling, but I was able to figure how out Ruby passes arguments to methods - Ruby doesn&rsquo;t strictly use call-by-value or call-by-reference, but rather passes arguments by using call-by-sharing.</p>

<p>Basically, Ruby neither completely replicates an argument in memory (call-by-value), nor does it send only a reference that could mutate the original argument in a given method.  Ruby merely creates another variable &ldquo;label&rdquo; that points to the exact same location in memory as the runtime argument.  Here comes my major revelation - the method can now &ldquo;act&rdquo; as a call-by-value OR a call-by-value, depending on what functions are called within the method.</p>

<p>There are two types of functions - those that modify a memory location and those that modify the label that points to a memory location.  For example, the &lt;&lt; operator actually modifies the memory location that both the run-time variable and the in-method argument point to.  The = operator merely assigns a given variable to ANOTHER memory location.  Thus, the shovel acts as pass-by-reference since the run-time variable is modified, and the equal sign acts as pass-by-value since the original value is unchanged.</p>
]]></content>
  </entry>
  
</feed>
